
plugins {
    id "org.jetbrains.kotlin.jvm" version "2.1.10"
    id "org.jetbrains.kotlin.plugin.serialization" version "2.1.10"
    id "io.ktor.plugin" version "3.1.2"
    id "maven-publish"
}

group = "ua.pp.lumivoid"
version = "0.0.1"
archivesBaseName = "lumi-server"
mainClassName = "io.ktor.server.netty.EngineMain"

base {
    archivesName  = archivesBaseName
}

def isDevelopment = project.ext.has("development")
applicationDefaultJvmArgs = ["-Dio.ktor.development=$isDevelopment"]

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.ktor.server.core
    implementation libs.ktor.serialization.kotlinx.json
    implementation libs.ktor.server.content.negotiation
    implementation libs.exposed.core
    implementation libs.exposed.jdbc
    implementation libs.h2
    implementation libs.ktor.server.netty
    implementation libs.logback.classic
    implementation libs.ktor.server.config.yaml
    testImplementation libs.ktor.server.test.host
    testImplementation libs.kotlin.test.junit
}

tasks.register("compileVite") {
    group = "build"

    doLast {
		if (System.getProperty("os.name").toLowerCase().contains("win")) {

			exec {
				workingDir  projectDir
				commandLine "cmd", "/c", "${projectDir}/../front/build.bat"
			}
		} else {
			exec {
				workingDir  projectDir
				commandLine "bash", "-c", "chmod +x ${projectDir}/../front/build.sh && ${projectDir}/../front/build.sh"
			}
		}
	}
}

processResources {
    dependsOn tasks.compileVite
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            artifactId = archivesBaseName
            groupId = group
            version = version
            from components.java
        }
    }

    repositories {
        maven {
            name = "Lumivoid"
            url = "https://maven.lumivoid.pp.ua/releases"

            credentials {
                username = project.hasProperty("mavenUsername") ? project.mavenUsername : System.getenv("MAVEN_USERNAME")
                password = project.hasProperty("mavenPassword") ? project.mavenPassword : System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}
